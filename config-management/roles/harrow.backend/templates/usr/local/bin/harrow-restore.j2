#!/bin/bash -e

# vim: ai ts=2 sw=2 et sts=2 ft=sh
# vim: autoindent tabstop=2 shiftwidth=2 expandtab softtabstop=2 filetype=sh

export AWS_ACCESS_KEY_ID={{ vault.backup.aws_access_key_id }}
export AWS_SECRET_ACCESS_KEY={{ vault.backup.aws_secret_access_key }}
export AWS_DEFAULT_REGION={{ vault.backup.aws_region }}



function restore_op_logs {
/usr/bin/aws s3 sync \
  --sse=aws:kms \
  --storage-class=STANDARD_IA \
  "s3://{{ vault.backup.aws_s3_bucket_name }}/operation-logs/" \
  /var/lib/harrow/op-logs/
}

function restore_redis {
dirname=redis-hetzner/$1
/usr/bin/aws s3 cp \
  --sse=aws:kms \
  --storage-class=STANDARD_IA \
  "s3://{{ vault.backup.aws_s3_bucket_name }}/$dirname/dump.rdb" \
  "/var/lib/harrow/redis/dump.rdb"
}

function restore_postgres {
dir=$(mktemp -d)
file=$1/{{ shared.postgresql.production.name }}.sqlc
/usr/bin/aws s3 cp \
  --sse=aws:kms \
  "s3://{{ vault.backup.aws_s3_bucket_name }}/postgresql-hetzner/$file"
  "$dir"
/usr/bin/pg_restore \
  --username {{ shared.postgresql.production.username }}\
  --clean \
  -Fc {{ shared.postgresql.production.name}} "$dir/$file"
}

function restore{
  echo Stopping Redis \& Postgresql
  systemctl stop redis postgresql

  restore_op_logs
  restore_redis
  restore_postgres

  echo Starting Redis \& Postgresql
  systemctl start redis postgresql
}

if [ "$#" -ne 1 ]; then
  echo "needs one parameter, the date to restore from, e.g $0 $(date --iso-8601=minutes)"
  exit 1
fi

read -p "Restore is destructive ARE YOU SURE?!!?!" -n 1 -r
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
  [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1 # handle exits from shell or function but don't exit interactive shell
  restore
fi
